/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.morlunk.mumbleclient.swig.opus;

public class Opus implements OpusConstants {
  public static byte[] opus_strerror(int error) {
    return OpusJNI.opus_strerror(error);
  }

  public static byte[] opus_get_version_string() {
    return OpusJNI.opus_get_version_string();
  }

  public static int opus_encoder_get_size(int channels) {
    return OpusJNI.opus_encoder_get_size(channels);
  }

  public static SWIGTYPE_p_OpusEncoder opus_encoder_create(int Fs, int channels, int application, int[] error) {
    long cPtr = OpusJNI.opus_encoder_create(Fs, channels, application, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_OpusEncoder(cPtr, false);
  }

  public static int opus_encoder_init(SWIGTYPE_p_OpusEncoder st, int Fs, int channels, int application) {
    return OpusJNI.opus_encoder_init(SWIGTYPE_p_OpusEncoder.getCPtr(st), Fs, channels, application);
  }

  public static int opus_encode(SWIGTYPE_p_OpusEncoder st, short[] pcm, int frame_size, byte[] data, int max_data_bytes) {
    return OpusJNI.opus_encode(SWIGTYPE_p_OpusEncoder.getCPtr(st), pcm, frame_size, data, max_data_bytes);
  }

  public static int opus_encode_float(SWIGTYPE_p_OpusEncoder st, float[] pcm, int frame_size, byte[] data, int max_data_bytes) {
    return OpusJNI.opus_encode_float(SWIGTYPE_p_OpusEncoder.getCPtr(st), pcm, frame_size, data, max_data_bytes);
  }

  public static void opus_encoder_destroy(SWIGTYPE_p_OpusEncoder st) {
    OpusJNI.opus_encoder_destroy(SWIGTYPE_p_OpusEncoder.getCPtr(st));
  }

  public static int opus_encoder_ctl(SWIGTYPE_p_OpusEncoder st, int request, int[] value) {
    return OpusJNI.opus_encoder_ctl(SWIGTYPE_p_OpusEncoder.getCPtr(st), request, value);
  }

  public static int opus_decoder_get_size(int channels) {
    return OpusJNI.opus_decoder_get_size(channels);
  }

  public static SWIGTYPE_p_OpusDecoder opus_decoder_create(int Fs, int channels, int[] error) {
    long cPtr = OpusJNI.opus_decoder_create(Fs, channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_OpusDecoder(cPtr, false);
  }

  public static int opus_decoder_init(SWIGTYPE_p_OpusDecoder st, int Fs, int channels) {
    return OpusJNI.opus_decoder_init(SWIGTYPE_p_OpusDecoder.getCPtr(st), Fs, channels);
  }

  public static int opus_decode(SWIGTYPE_p_OpusDecoder st, byte[] data, int len, short[] pcm, int frame_size, int decode_fec) {
    return OpusJNI.opus_decode(SWIGTYPE_p_OpusDecoder.getCPtr(st), data, len, pcm, frame_size, decode_fec);
  }

  public static int opus_decode_float(SWIGTYPE_p_OpusDecoder st, byte[] data, int len, float[] pcm, int frame_size, int decode_fec) {
    return OpusJNI.opus_decode_float(SWIGTYPE_p_OpusDecoder.getCPtr(st), data, len, pcm, frame_size, decode_fec);
  }

  public static int opus_decoder_ctl(SWIGTYPE_p_OpusDecoder st, int request) {
    return OpusJNI.opus_decoder_ctl(SWIGTYPE_p_OpusDecoder.getCPtr(st), request);
  }

  public static void opus_decoder_destroy(SWIGTYPE_p_OpusDecoder st) {
    OpusJNI.opus_decoder_destroy(SWIGTYPE_p_OpusDecoder.getCPtr(st));
  }

  public static int opus_packet_parse(byte[] data, int len, byte[] out_toc, SWIGTYPE_p_p_unsigned_char frames, SWIGTYPE_p_short size, int[] payload_offset) {
    return OpusJNI.opus_packet_parse(data, len, out_toc, SWIGTYPE_p_p_unsigned_char.getCPtr(frames), SWIGTYPE_p_short.getCPtr(size), payload_offset);
  }

  public static int opus_packet_get_bandwidth(byte[] data) {
    return OpusJNI.opus_packet_get_bandwidth(data);
  }

  public static int opus_packet_get_samples_per_frame(byte[] data, int Fs) {
    return OpusJNI.opus_packet_get_samples_per_frame(data, Fs);
  }

  public static int opus_packet_get_nb_channels(byte[] data) {
    return OpusJNI.opus_packet_get_nb_channels(data);
  }

  public static int opus_packet_get_nb_frames(byte[] packet, int len) {
    return OpusJNI.opus_packet_get_nb_frames(packet, len);
  }

  public static int opus_packet_get_nb_samples(byte[] packet, int len, int Fs) {
    return OpusJNI.opus_packet_get_nb_samples(packet, len, Fs);
  }

  public static int opus_decoder_get_nb_samples(SWIGTYPE_p_OpusDecoder dec, byte[] packet, int len) {
    return OpusJNI.opus_decoder_get_nb_samples(SWIGTYPE_p_OpusDecoder.getCPtr(dec), packet, len);
  }

  public static int opus_repacketizer_get_size() {
    return OpusJNI.opus_repacketizer_get_size();
  }

  public static SWIGTYPE_p_OpusRepacketizer opus_repacketizer_init(SWIGTYPE_p_OpusRepacketizer rp) {
    long cPtr = OpusJNI.opus_repacketizer_init(SWIGTYPE_p_OpusRepacketizer.getCPtr(rp));
    return (cPtr == 0) ? null : new SWIGTYPE_p_OpusRepacketizer(cPtr, false);
  }

  public static SWIGTYPE_p_OpusRepacketizer opus_repacketizer_create() {
    long cPtr = OpusJNI.opus_repacketizer_create();
    return (cPtr == 0) ? null : new SWIGTYPE_p_OpusRepacketizer(cPtr, false);
  }

  public static void opus_repacketizer_destroy(SWIGTYPE_p_OpusRepacketizer rp) {
    OpusJNI.opus_repacketizer_destroy(SWIGTYPE_p_OpusRepacketizer.getCPtr(rp));
  }

  public static int opus_repacketizer_cat(SWIGTYPE_p_OpusRepacketizer rp, byte[] data, int len) {
    return OpusJNI.opus_repacketizer_cat(SWIGTYPE_p_OpusRepacketizer.getCPtr(rp), data, len);
  }

  public static int opus_repacketizer_out_range(SWIGTYPE_p_OpusRepacketizer rp, int begin, int end, byte[] data, int maxlen) {
    return OpusJNI.opus_repacketizer_out_range(SWIGTYPE_p_OpusRepacketizer.getCPtr(rp), begin, end, data, maxlen);
  }

  public static int opus_repacketizer_get_nb_frames(SWIGTYPE_p_OpusRepacketizer rp) {
    return OpusJNI.opus_repacketizer_get_nb_frames(SWIGTYPE_p_OpusRepacketizer.getCPtr(rp));
  }

  public static int opus_repacketizer_out(SWIGTYPE_p_OpusRepacketizer rp, byte[] data, int maxlen) {
    return OpusJNI.opus_repacketizer_out(SWIGTYPE_p_OpusRepacketizer.getCPtr(rp), data, maxlen);
  }

}
