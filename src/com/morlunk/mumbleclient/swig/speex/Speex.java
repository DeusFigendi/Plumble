/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.9
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.morlunk.mumbleclient.swig.speex;

public class Speex implements SpeexConstants {
  public static SWIGTYPE_p_void intToVoidPointer(int[] intValue) {
    long cPtr = SpeexJNI.intToVoidPointer(intValue);
    return (cPtr == 0) ? null : new SWIGTYPE_p_void(cPtr, false);
  }

  public static SWIGTYPE_p_JitterBuffer_ jitter_buffer_init(int step_size) {
    long cPtr = SpeexJNI.jitter_buffer_init(step_size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_JitterBuffer_(cPtr, false);
  }

  public static void jitter_buffer_reset(SWIGTYPE_p_JitterBuffer_ jitter) {
    SpeexJNI.jitter_buffer_reset(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter));
  }

  public static void jitter_buffer_destroy(SWIGTYPE_p_JitterBuffer_ jitter) {
    SpeexJNI.jitter_buffer_destroy(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter));
  }

  public static void jitter_buffer_put(SWIGTYPE_p_JitterBuffer_ jitter, JitterBufferPacket packet) {
    SpeexJNI.jitter_buffer_put(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter), JitterBufferPacket.getCPtr(packet), packet);
  }

  public static int jitter_buffer_get(SWIGTYPE_p_JitterBuffer_ jitter, JitterBufferPacket packet, int desired_span, int[] start_offset) {
    return SpeexJNI.jitter_buffer_get(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter), JitterBufferPacket.getCPtr(packet), packet, desired_span, start_offset);
  }

  public static int jitter_buffer_get_another(SWIGTYPE_p_JitterBuffer_ jitter, JitterBufferPacket packet) {
    return SpeexJNI.jitter_buffer_get_another(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter), JitterBufferPacket.getCPtr(packet), packet);
  }

  public static int jitter_buffer_get_pointer_timestamp(SWIGTYPE_p_JitterBuffer_ jitter) {
    return SpeexJNI.jitter_buffer_get_pointer_timestamp(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter));
  }

  public static void jitter_buffer_tick(SWIGTYPE_p_JitterBuffer_ jitter) {
    SpeexJNI.jitter_buffer_tick(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter));
  }

  public static void jitter_buffer_remaining_span(SWIGTYPE_p_JitterBuffer_ jitter, long rem) {
    SpeexJNI.jitter_buffer_remaining_span(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter), rem);
  }

  public static int jitter_buffer_ctl(SWIGTYPE_p_JitterBuffer_ jitter, int request, SWIGTYPE_p_void ptr) {
    return SpeexJNI.jitter_buffer_ctl(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter), request, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static int jitter_buffer_update_delay(SWIGTYPE_p_JitterBuffer_ jitter, JitterBufferPacket packet, int[] start_offset) {
    return SpeexJNI.jitter_buffer_update_delay(SWIGTYPE_p_JitterBuffer_.getCPtr(jitter), JitterBufferPacket.getCPtr(packet), packet, start_offset);
  }

  public static SWIGTYPE_p_SpeexEchoState_ speex_echo_state_init(int frame_size, int filter_length) {
    long cPtr = SpeexJNI.speex_echo_state_init(frame_size, filter_length);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SpeexEchoState_(cPtr, false);
  }

  public static SWIGTYPE_p_SpeexEchoState_ speex_echo_state_init_mc(int frame_size, int filter_length, int nb_mic, int nb_speakers) {
    long cPtr = SpeexJNI.speex_echo_state_init_mc(frame_size, filter_length, nb_mic, nb_speakers);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SpeexEchoState_(cPtr, false);
  }

  public static void speex_echo_state_destroy(SWIGTYPE_p_SpeexEchoState_ st) {
    SpeexJNI.speex_echo_state_destroy(SWIGTYPE_p_SpeexEchoState_.getCPtr(st));
  }

  public static void speex_echo_cancellation(SWIGTYPE_p_SpeexEchoState_ st, short[] rec, short[] play, short[] out) {
    SpeexJNI.speex_echo_cancellation(SWIGTYPE_p_SpeexEchoState_.getCPtr(st), rec, play, out);
  }

  public static void speex_echo_cancel(SWIGTYPE_p_SpeexEchoState_ st, short[] rec, short[] play, short[] out, int[] Yout) {
    SpeexJNI.speex_echo_cancel(SWIGTYPE_p_SpeexEchoState_.getCPtr(st), rec, play, out, Yout);
  }

  public static void speex_echo_capture(SWIGTYPE_p_SpeexEchoState_ st, short[] rec, short[] out) {
    SpeexJNI.speex_echo_capture(SWIGTYPE_p_SpeexEchoState_.getCPtr(st), rec, out);
  }

  public static void speex_echo_playback(SWIGTYPE_p_SpeexEchoState_ st, short[] play) {
    SpeexJNI.speex_echo_playback(SWIGTYPE_p_SpeexEchoState_.getCPtr(st), play);
  }

  public static void speex_echo_state_reset(SWIGTYPE_p_SpeexEchoState_ st) {
    SpeexJNI.speex_echo_state_reset(SWIGTYPE_p_SpeexEchoState_.getCPtr(st));
  }

  public static int speex_echo_ctl(SWIGTYPE_p_SpeexEchoState_ st, int request, SWIGTYPE_p_void ptr) {
    return SpeexJNI.speex_echo_ctl(SWIGTYPE_p_SpeexEchoState_.getCPtr(st), request, SWIGTYPE_p_void.getCPtr(ptr));
  }

  public static SWIGTYPE_p_SpeexDecorrState_ speex_decorrelate_new(int rate, int channels, int frame_size) {
    long cPtr = SpeexJNI.speex_decorrelate_new(rate, channels, frame_size);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SpeexDecorrState_(cPtr, false);
  }

  public static void speex_decorrelate(SWIGTYPE_p_SpeexDecorrState_ st, short[] in, short[] out, int strength) {
    SpeexJNI.speex_decorrelate(SWIGTYPE_p_SpeexDecorrState_.getCPtr(st), in, out, strength);
  }

  public static void speex_decorrelate_destroy(SWIGTYPE_p_SpeexDecorrState_ st) {
    SpeexJNI.speex_decorrelate_destroy(SWIGTYPE_p_SpeexDecorrState_.getCPtr(st));
  }

  public static SWIGTYPE_p_SpeexResamplerState_ speex_resampler_init(long nb_channels, long in_rate, long out_rate, int quality, int[] err) {
    long cPtr = SpeexJNI.speex_resampler_init(nb_channels, in_rate, out_rate, quality, err);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SpeexResamplerState_(cPtr, false);
  }

  public static SWIGTYPE_p_SpeexResamplerState_ speex_resampler_init_frac(long nb_channels, long ratio_num, long ratio_den, long in_rate, long out_rate, int quality, int[] err) {
    long cPtr = SpeexJNI.speex_resampler_init_frac(nb_channels, ratio_num, ratio_den, in_rate, out_rate, quality, err);
    return (cPtr == 0) ? null : new SWIGTYPE_p_SpeexResamplerState_(cPtr, false);
  }

  public static void speex_resampler_destroy(SWIGTYPE_p_SpeexResamplerState_ st) {
    SpeexJNI.speex_resampler_destroy(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st));
  }

  public static int speex_resampler_process_float(SWIGTYPE_p_SpeexResamplerState_ st, long channel_index, float[] in, int[] in_len, float[] out, int[] out_len) {
    return SpeexJNI.speex_resampler_process_float(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), channel_index, in, in_len, out, out_len);
  }

  public static int speex_resampler_process_int(SWIGTYPE_p_SpeexResamplerState_ st, long channel_index, short[] in, int[] in_len, short[] out, int[] out_len) {
    return SpeexJNI.speex_resampler_process_int(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), channel_index, in, in_len, out, out_len);
  }

  public static int speex_resampler_process_interleaved_float(SWIGTYPE_p_SpeexResamplerState_ st, float[] in, int[] in_len, float[] out, int[] out_len) {
    return SpeexJNI.speex_resampler_process_interleaved_float(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), in, in_len, out, out_len);
  }

  public static int speex_resampler_process_interleaved_int(SWIGTYPE_p_SpeexResamplerState_ st, short[] in, int[] in_len, short[] out, int[] out_len) {
    return SpeexJNI.speex_resampler_process_interleaved_int(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), in, in_len, out, out_len);
  }

  public static int speex_resampler_set_rate(SWIGTYPE_p_SpeexResamplerState_ st, long in_rate, long out_rate) {
    return SpeexJNI.speex_resampler_set_rate(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), in_rate, out_rate);
  }

  public static void speex_resampler_get_rate(SWIGTYPE_p_SpeexResamplerState_ st, int[] in_rate, int[] out_rate) {
    SpeexJNI.speex_resampler_get_rate(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), in_rate, out_rate);
  }

  public static int speex_resampler_set_rate_frac(SWIGTYPE_p_SpeexResamplerState_ st, long ratio_num, long ratio_den, long in_rate, long out_rate) {
    return SpeexJNI.speex_resampler_set_rate_frac(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), ratio_num, ratio_den, in_rate, out_rate);
  }

  public static void speex_resampler_get_ratio(SWIGTYPE_p_SpeexResamplerState_ st, int[] ratio_num, int[] ratio_den) {
    SpeexJNI.speex_resampler_get_ratio(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), ratio_num, ratio_den);
  }

  public static int speex_resampler_set_quality(SWIGTYPE_p_SpeexResamplerState_ st, int quality) {
    return SpeexJNI.speex_resampler_set_quality(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), quality);
  }

  public static void speex_resampler_get_quality(SWIGTYPE_p_SpeexResamplerState_ st, int[] quality) {
    SpeexJNI.speex_resampler_get_quality(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), quality);
  }

  public static void speex_resampler_set_input_stride(SWIGTYPE_p_SpeexResamplerState_ st, long stride) {
    SpeexJNI.speex_resampler_set_input_stride(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), stride);
  }

  public static void speex_resampler_get_input_stride(SWIGTYPE_p_SpeexResamplerState_ st, int[] stride) {
    SpeexJNI.speex_resampler_get_input_stride(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), stride);
  }

  public static void speex_resampler_set_output_stride(SWIGTYPE_p_SpeexResamplerState_ st, long stride) {
    SpeexJNI.speex_resampler_set_output_stride(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), stride);
  }

  public static void speex_resampler_get_output_stride(SWIGTYPE_p_SpeexResamplerState_ st, int[] stride) {
    SpeexJNI.speex_resampler_get_output_stride(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st), stride);
  }

  public static int speex_resampler_get_input_latency(SWIGTYPE_p_SpeexResamplerState_ st) {
    return SpeexJNI.speex_resampler_get_input_latency(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st));
  }

  public static int speex_resampler_get_output_latency(SWIGTYPE_p_SpeexResamplerState_ st) {
    return SpeexJNI.speex_resampler_get_output_latency(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st));
  }

  public static int speex_resampler_skip_zeros(SWIGTYPE_p_SpeexResamplerState_ st) {
    return SpeexJNI.speex_resampler_skip_zeros(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st));
  }

  public static int speex_resampler_reset_mem(SWIGTYPE_p_SpeexResamplerState_ st) {
    return SpeexJNI.speex_resampler_reset_mem(SWIGTYPE_p_SpeexResamplerState_.getCPtr(st));
  }

  public static byte[] speex_resampler_strerror(int err) {
    return SpeexJNI.speex_resampler_strerror(err);
  }

}
