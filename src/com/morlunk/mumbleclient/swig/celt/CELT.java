/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.10
 *
 * Do not make changes to this file unless you know what you are doing--modify
 * the SWIG interface file instead.
 * ----------------------------------------------------------------------------- */

package com.morlunk.mumbleclient.swig.celt;

public class CELT implements CELTConstants {
  public static SWIGTYPE_p_CELTMode celt_mode_create(int Fs, int frame_size, int[] error) {
    long cPtr = CELTJNI.celt_mode_create(Fs, frame_size, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTMode(cPtr, false);
  }

  public static void celt_mode_destroy(SWIGTYPE_p_CELTMode mode) {
    CELTJNI.celt_mode_destroy(SWIGTYPE_p_CELTMode.getCPtr(mode));
  }

  public static int celt_mode_info(SWIGTYPE_p_CELTMode mode, int request, int[] value) {
    return CELTJNI.celt_mode_info(SWIGTYPE_p_CELTMode.getCPtr(mode), request, value);
  }

  public static SWIGTYPE_p_CELTEncoder celt_encoder_create(SWIGTYPE_p_CELTMode mode, int channels, int[] error) {
    long cPtr = CELTJNI.celt_encoder_create(SWIGTYPE_p_CELTMode.getCPtr(mode), channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTEncoder(cPtr, false);
  }

  public static void celt_encoder_destroy(SWIGTYPE_p_CELTEncoder st) {
    CELTJNI.celt_encoder_destroy(SWIGTYPE_p_CELTEncoder.getCPtr(st));
  }

  public static int celt_encode_float(SWIGTYPE_p_CELTEncoder st, float[] pcm, float[] optional_synthesis, byte[] compressed, int nbCompressedBytes) {
    return CELTJNI.celt_encode_float(SWIGTYPE_p_CELTEncoder.getCPtr(st), pcm, optional_synthesis, compressed, nbCompressedBytes);
  }

  public static int celt_encode(SWIGTYPE_p_CELTEncoder st, short[] pcm, short[] optional_synthesis, byte[] compressed, int nbCompressedBytes) {
    return CELTJNI.celt_encode(SWIGTYPE_p_CELTEncoder.getCPtr(st), pcm, optional_synthesis, compressed, nbCompressedBytes);
  }

  public static int celt_encoder_ctl(SWIGTYPE_p_CELTEncoder st, int request, int[] value) {
    return CELTJNI.celt_encoder_ctl(SWIGTYPE_p_CELTEncoder.getCPtr(st), request, value);
  }

  public static SWIGTYPE_p_CELTDecoder celt_decoder_create(SWIGTYPE_p_CELTMode mode, int channels, int[] error) {
    long cPtr = CELTJNI.celt_decoder_create(SWIGTYPE_p_CELTMode.getCPtr(mode), channels, error);
    return (cPtr == 0) ? null : new SWIGTYPE_p_CELTDecoder(cPtr, false);
  }

  public static void celt_decoder_destroy(SWIGTYPE_p_CELTDecoder st) {
    CELTJNI.celt_decoder_destroy(SWIGTYPE_p_CELTDecoder.getCPtr(st));
  }

  public static int celt_decode_float(SWIGTYPE_p_CELTDecoder st, byte[] data, int len, float[] pcm) {
    return CELTJNI.celt_decode_float(SWIGTYPE_p_CELTDecoder.getCPtr(st), data, len, pcm);
  }

  public static int celt_decode(SWIGTYPE_p_CELTDecoder st, byte[] data, int len, short[] pcm) {
    return CELTJNI.celt_decode(SWIGTYPE_p_CELTDecoder.getCPtr(st), data, len, pcm);
  }

  public static int celt_decoder_ctl(SWIGTYPE_p_CELTDecoder st, int request) {
    return CELTJNI.celt_decoder_ctl(SWIGTYPE_p_CELTDecoder.getCPtr(st), request);
  }

  public static byte[] celt_strerror(int error) {
    return CELTJNI.celt_strerror(error);
  }

}
